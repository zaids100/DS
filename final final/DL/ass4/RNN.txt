import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
from sklearn.metrics import r2_score

df = pd.read_csv('Google_Stock_Price_Train.csv',thousands=',')
df.head()

ax1 = df.plot(x="Date", y=["Open", "High", "Low", "Close"], figsize=(10,7),title='Open, High, Low, Close Stock Prices of Google Stocks')
ax1.set_ylabel("Stock Price")

ax2 = df.plot(x="Date", y=["Volume"], figsize=(10,7))
ax2.set_ylabel("Stock Volume")

df.isna().sum()

df[['Open','High','Low','Close','Volume']].plot(kind='box', layout=(1,5), subplots=True, sharex=False, sharey=False, figsize=(10,7))
plt.show()

df.hist(figsize=(10,7))
plt.show()

scaler = MinMaxScaler()
data_without_date = df.drop("Date", axis=1)
scaled_data = pd.DataFrame(scaler.fit_transform(data_without_date))
scaled_data.hist(figsize=(10,7))
plt.show()

plt.figure(figsize=(10,7))
sns.heatmap(df.drop("Date", axis=1).corr())
plt.show()

scaled_data = scaled_data.drop([0, 2, 3], axis=1)
scaled_data

def split_seq_multivariate(sequence, n_past, n_future):
    '''
    n_past ==> no of past observations
    n_future ==> no of future observations
    '''
    x = []
    y = []
    for window_start in range(len(sequence)):
        past_end = window_start + n_past
        future_end = past_end + n_future
        if future_end > len(sequence):
            break
        past = sequence[window_start:past_end, :]
        future = sequence[past_end:future_end, -1]
        x.append(past)
        y.append(future)
    return np.array(x), np.array(y)

n_steps = 60

scaled_data = scaled_data.to_numpy()
scaled_data.shape

x, y = split_seq_multivariate(scaled_data, n_steps, 1)

x.shape, y.shape

y = y[:, 0]
y.shape

x_train, x_test, y_train, y_test = train_test_split(x, y,test_size=0.2, random_state=42)
x_train.shape, x_test.shape, y_train.shape, y_test.shape

model = Sequential()
model.add(LSTM(612, input_shape=(n_steps, 2)))
model.add(Dense(50, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(30, activation='relu'))
model.add(Dense(1))

model.summary()

model.compile(optimizer='adam', loss='mse', metrics=['mae'])

history = model.fit(x_train, y_train, epochs=250, batch_size=32, verbose=2, validation_data=(x_test, y_test))

pd.DataFrame(history.history).plot(figsize=(10,7))

model.evaluate(x_test, y_test)

predictions = model.predict(x_test)
predictions.shape

plt.plot(y_test, c = 'r')
plt.plot(predictions, c = 'y')
plt.xlabel('Day')
plt.ylabel('Stock Price Volume')
plt.title('Stock Price Volume Prediction Graph using RNN (LSTM)')
plt.legend(['Actual','Predicted'], loc = 'lower right')
plt.figure(figsize=(10,7))
plt.show()